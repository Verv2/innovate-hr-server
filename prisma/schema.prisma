// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String         @id @default(uuid())
  email              String         @unique
  password           String?
  role               UserRole?
  needPasswordChange Boolean        @default(true)
  status             UserStatus     @default(ACTIVE)
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  profile            Profile?
  leaveRequest       LeaveRequest[]
  employees          Employees?

  @@map("users")
}

model Employees {
  id            String         @id @default(uuid())
  userId        String         @unique
  firstName     String
  middleName    String?
  lastName      String
  dateOfBirth   DateTime
  gender        Gender
  homeAddress   String
  nationality   String
  maritalStatus MaritalStatus?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  contactInformation      ContactInformation?
  emergencyContact        EmergencyContact?
  identificationDocuments IdentificationDocuments?
  employmentDetails       EmploymentDetails?
  financialInformation    FinancialInformation?
  additionalDocuments     AdditionalDocuments[]

  user User @relation(fields: [userId], references: [id])

  @@map("employees")
}

model ContactInformation {
  id                 String @id @default(uuid())
  employeeId         String @unique
  phoneNumber        String @unique
  email              String @unique
  residentialAddress String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  employee Employees @relation(fields: [employeeId], references: [id])

  @@map("contact_information")
}

model EmergencyContact {
  id                   String @id @default(uuid())
  employeeId           String @unique
  name                 String
  relationship         String
  emergencyPhoneNumber String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  employee Employees @relation(fields: [employeeId], references: [id])

  @@map("emergency_contact")
}

model IdentificationDocuments {
  id                   String   @id @default(uuid())
  employeeId           String   @unique
  passportOrNationalId String
  insuranceNumber      String
  socialSecurityNumber String
  visaExpiryDate       DateTime
  taxIdNumber          String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  employee Employees @relation(fields: [employeeId], references: [id])

  @@map("identification_documents")
}

model EmploymentDetails {
  id               String       @id @default(uuid())
  employeeId       String       @unique
  employeeIdNumber String       @unique
  jobTitle         String
  department       String
  dateOfJoining    DateTime
  employmentType   EmployeeType

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  employee Employees @relation(fields: [employeeId], references: [id])

  @@map("employment_details")
}

model FinancialInformation {
  id                String             @id @default(uuid())
  employeeId        String             @unique
  bankName          String
  accountNumber     String
  accountHolder     String
  bankAddress       String
  sortCode          String
  ibanOrSwfit       String
  benefitEnrollment BenefitsEnrollment @default(NONE)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  employee Employees @relation(fields: [employeeId], references: [id])

  @@map("financial_information")
}

model AdditionalDocuments {
  id                       String   @id @default(uuid())
  employeeId               String
  signedContractPaperwork  String
  educationalCertificates  String[]
  professionalCertificates String?
  recentPhotograph         String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  employee Employees @relation(fields: [employeeId], references: [id])

  @@map("additional_documents")
}

model TemporaryEmployee {
  id        String   @id @default(uuid())
  userId    String   @unique
  step      Int
  data      Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("temporary_employee") // Current step in the onboarding process
}

model Profile {
  id            String   @id @default(uuid())
  firstName     String
  lastName      String
  email         String   @unique
  profilePhoto  String?
  contactNumber String
  shiftStart    String // Default shift start time (HH:MM format)
  shiftEnd      String // Default shift end time (HH:MM format)
  isDeleted     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user           User            @relation(fields: [email], references: [email])
  shiftOverrides ShiftOverride[]

  @@map("profile")
}

model ShiftOverride {
  id         String   @id @default(uuid())
  date       DateTime @unique // Specific date when the shift is different
  shiftStart String // Override shift start time (HH:MM format)
  shiftEnd   String // Override shift end time (HH:MM format)

  profile   Profile @relation(fields: [profileId], references: [id])
  profileId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("shift_override")
}

model LeaveRequest {
  id         String      @id @default(uuid())
  userId     String
  leaveType  LeaveType
  leaveDates String[] // Only store an array of leave dates
  status     LeaveStatus @default(PENDING)
  reason     String?
  user       User        @relation(fields: [userId], references: [id])
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@map("leave_requests")
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  MANAGER
  EMPLOYEE
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum MaritalStatus {
  SINGLE
  MARRIED
  DIVORCED
  WIDOWED
}

enum EmployeeType {
  FULL_TIME
  PART_TIME
  CONTRACT
}

enum BenefitsEnrollment {
  NONE
  HEALTH_INSURANCE
  PENSION
}

enum UserStatus {
  ACTIVE
  BLOCKED
  DELETED
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
}

enum LeaveType {
  SICK_LEAVE
  ANNUAL_LEAVE
}
